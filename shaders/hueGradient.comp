//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform float hueStart;
uniform float hueEnd;
uniform float saturation;
uniform float value;

layout(std430, binding=2) buffer colors{
   float channels[];
};

// Thanks to https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl
vec3 hsv2rgb(vec3 c) {
  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void cool_main(){
    uint gid = gl_GlobalInvocationID.x;
    float t = gid / float(NumberOfComputationsX);
    float hue = mix(hueStart, hueEnd, t);
    vec3 col = hsv2rgb(vec3(hue, saturation, value));
        
    channels[3 * gid + 0] = col.r;
    channels[3 * gid + 1] = col.g;
    channels[3 * gid + 2] = col.b;
}