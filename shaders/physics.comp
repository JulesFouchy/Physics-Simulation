//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform float _dt;
uniform float _internal_damping;
uniform float _external_damping;
uniform float _stiffness;
uniform float _gravity;
uniform vec2 _mouse_pos;

// Wind
uniform float _wind_noise_puls;
uniform float _wind_max_strength;
uniform float _wind_min_strength;
uniform float _wind_direction_angle;
uniform vec2  _wind_offset;

uniform float _time;
uniform float _amplitude;
uniform float _pulsation;

uniform vec2 _body_delta;

float snoise(vec2 v);

//? #define __bindingIN__  1
//? #define __bindingOUT__ 2
layout(std430, binding=__bindingIN__) buffer particlePositions__bindingIN__ {
   vec2 partPosIN[];
};
layout(std430, binding=__bindingOUT__) buffer particlePositions__bindingOUT__ {
   vec2 partPosOUT[];
};

layout(std430, binding=3) buffer particleVelocities {
   vec2 partVel[];
};
layout(std430, binding=4) buffer heldParticle {
   unsigned int heldPart[];
};

void cool_main(){
    float stiffness = _stiffness / _dt / _dt / 3600.f * NumberOfComputationsX;
    float internal_damping = _internal_damping / _dt / 60.f * NumberOfComputationsX / 100.f;
    float external_damping = _external_damping / _dt / 60.f * NumberOfComputationsX / 100.f;

    uint gid = gl_GlobalInvocationID.x;
    if (gid != heldPart[0]) {
        if (gid != 0 && gid != NumberOfComputationsX - 1) {
            vec2 dirL = partPosIN[gid] - partPosIN[gid - 1];
            vec2 dirR = partPosIN[gid] - partPosIN[gid + 1];
            vec2 acc =
                - (dirL + dirR) * stiffness  // Spring attraction
                - (partVel[gid] - 0.5 * (partVel[gid+1] + partVel[gid-1])) * internal_damping
                - partVel[gid] * external_damping
                + vec2(0., -_gravity)         // Gravity
            ;
            // wind
            // float agl = _wind_direction_angle + 6.28*0.1 * snoise(_wind_noise_puls * partPosIN[gid] + _time + 123.4567);
            // float strength = 0.5 + 0.5 * snoise(_wind_noise_puls * partPosIN[gid]+ _time);
            // strength = strength * (_wind_max_strength - _wind_min_strength) + _wind_min_strength;
            // acc += strength * vec2(cos(agl), sin(agl));
            // apply
            partVel[gid] += acc * _dt;
            partPosOUT[gid] = partPosIN[gid] + partVel[gid] * _dt;
        }
        else {
            partPosOUT[gid] = partPosIN[gid];
        }
    }
    else {
        partPosOUT[gid] = _mouse_pos;
    }
}

// Simplex 2D noise by https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
//