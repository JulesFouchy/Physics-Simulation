//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform float _dt;
uniform float _internal_damping;
uniform float _external_damping;
uniform float _stiffness;
uniform float _gravity;
uniform vec2 _mouse_pos;

uniform float _time;
uniform float _amplitude;
uniform float _pulsation;

uniform vec2 _body_delta;

//? #define __bindingIN__  1
//? #define __bindingOUT__ 2
layout(std430, binding=__bindingIN__) buffer particlePositions__bindingIN__ {
   vec2 partPosIN[];
};
layout(std430, binding=__bindingOUT__) buffer particlePositions__bindingOUT__ {
   vec2 partPosOUT[];
};

layout(std430, binding=3) buffer particleVelocities {
   vec2 partVel[];
};
layout(std430, binding=4) buffer heldParticle {
   unsigned int heldPart[];
};

void cool_main(){
    uint gid = gl_GlobalInvocationID.x;
    if (gid != heldPart[0]) {
        uint nbPartPerTentacle = (NumberOfComputationsX-1) / 8 +1;
        uint ggid = gid % nbPartPerTentacle;
        if (ggid > 0 && ggid < nbPartPerTentacle - 1 && gid < NumberOfComputationsX - 1) {
            vec2 dirL = partPosIN[gid] - partPosIN[gid - 1];
            vec2 dirR = partPosIN[gid] - partPosIN[gid + 1];
            vec2 acc = 
                - (dirL + dirR) * _stiffness * nbPartPerTentacle  // Spring attraction
                - (partVel[gid] - 0.5 * (partVel[gid+1] + partVel[gid-1])) * _internal_damping
                - partVel[gid] * _external_damping
                + vec2(0., -_gravity)         // Gravity
            ;
            // apply
            partVel[gid] += acc * _dt;
            partPosOUT[gid] = partPosIN[gid] + partVel[gid] * _dt;
        }
        else if (ggid == 0) {
            partPosOUT[gid] = _body_delta + vec2(
                partPosIN[gid].x,
                partPosIN[gid].y//_amplitude * sin(_time * _pulsation)
            );
        }
        else {
            vec2 dirL = partPosIN[gid] - partPosIN[gid - 1];
            vec2 acc = 
                - (dirL) * _stiffness * nbPartPerTentacle  // Spring attraction
                - (partVel[gid] - partVel[gid-1]) * _internal_damping
                - partVel[gid] * _external_damping
                + vec2(0., -_gravity)         // Gravity
            ;
            // apply
            partVel[gid] += acc * _dt;
            partPosOUT[gid] = partPosIN[gid] + partVel[gid] * _dt;
        }
    }
    else {
        partPosOUT[gid] = _mouse_pos;
    }
}