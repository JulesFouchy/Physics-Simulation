//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform float dt;

layout(std430, binding=0) buffer particlePositions {
   vec2 partPos[];
};

layout(std430, binding=1) buffer particleVelocities {
   vec2 partVel[];
};

void cool_main(){
    uint gid = gl_GlobalInvocationID.x;
    // vec2 dir = restPos[gid] - part[gid].pos;
    vec2 acc = vec2(0.1, 0.);
    // apply
    partVel[gid] += acc * dt;
    partPos[gid] += partVel[gid] * dt;
}