//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform float _dt;
uniform float _air_damping;
uniform float _stiffness;

layout(std430, binding=0) buffer particlePositions {
   vec2 partPos[];
};

layout(std430, binding=1) buffer particleVelocities {
   vec2 partVel[];
};

void cool_main(){
    uint gid = gl_GlobalInvocationID.x;
    if (gid > 0 && gid < NumberOfComputationsX - 1) {
        vec2 dir = partPos[gid] - partPos[(gid + 1)%NumberOfComputationsX];
        vec2 acc = - dir * _stiffness - partVel[gid] * _air_damping;
        // apply
        partVel[gid] += acc * _dt;
        partPos[gid] += partVel[gid] * _dt;
    }
}